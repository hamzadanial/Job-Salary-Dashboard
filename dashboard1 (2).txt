{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "54b47d28",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "import json, urllib.request\n",
    "from difflib import get_close_matches\n",
    "\n",
    "from bokeh.io        import curdoc\n",
    "from bokeh.layouts   import column, row\n",
    "from bokeh.models    import (\n",
    "    GeoJSONDataSource, LinearColorMapper, ColorBar, BasicTicker,\n",
    "    ColumnDataSource, Select, HoverTool, FactorRange,\n",
    "    NumeralTickFormatter\n",
    ")\n",
    "from bokeh.plotting  import figure\n",
    "from bokeh.palettes  import Viridis256, Category20c\n",
    "from bokeh.transform import cumsum\n",
    "from math            import pi"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "e8e6fa75",
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "### ───Step 1) Load & prepare your DataFrame ──────────────────────────────────────\n",
    "df = pd.read_excel(\"jobs_in_data_exported.xlsx\")\n",
    "df.columns = df.columns.str.strip()   # remove stray spaces\n",
    "\n",
    "salary_col = \"salary_in_usd\"\n",
    "if salary_col not in df.columns:\n",
    "    raise KeyError(f\"{salary_col!r} not in columns: {df.columns.tolist()}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "b7f543e5",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>work_year</th>\n",
       "      <th>job_title</th>\n",
       "      <th>job_category</th>\n",
       "      <th>salary_currency</th>\n",
       "      <th>salary</th>\n",
       "      <th>salary_in_usd</th>\n",
       "      <th>employee_residence</th>\n",
       "      <th>experience_level</th>\n",
       "      <th>employment_type</th>\n",
       "      <th>work_setting</th>\n",
       "      <th>company_location</th>\n",
       "      <th>company_size</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2023</td>\n",
       "      <td>Data DevOps Engineer</td>\n",
       "      <td>Data Engineering</td>\n",
       "      <td>EUR</td>\n",
       "      <td>88000</td>\n",
       "      <td>95012</td>\n",
       "      <td>Germany</td>\n",
       "      <td>Mid-level</td>\n",
       "      <td>Full-time</td>\n",
       "      <td>Hybrid</td>\n",
       "      <td>Germany</td>\n",
       "      <td>L</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2023</td>\n",
       "      <td>Data Architect</td>\n",
       "      <td>Data Architecture and Modeling</td>\n",
       "      <td>USD</td>\n",
       "      <td>186000</td>\n",
       "      <td>186000</td>\n",
       "      <td>United States</td>\n",
       "      <td>Senior</td>\n",
       "      <td>Full-time</td>\n",
       "      <td>In-person</td>\n",
       "      <td>United States</td>\n",
       "      <td>M</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2023</td>\n",
       "      <td>Data Architect</td>\n",
       "      <td>Data Architecture and Modeling</td>\n",
       "      <td>USD</td>\n",
       "      <td>81800</td>\n",
       "      <td>81800</td>\n",
       "      <td>United States</td>\n",
       "      <td>Senior</td>\n",
       "      <td>Full-time</td>\n",
       "      <td>In-person</td>\n",
       "      <td>United States</td>\n",
       "      <td>M</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2023</td>\n",
       "      <td>Data Scientist</td>\n",
       "      <td>Data Science and Research</td>\n",
       "      <td>USD</td>\n",
       "      <td>212000</td>\n",
       "      <td>212000</td>\n",
       "      <td>United States</td>\n",
       "      <td>Senior</td>\n",
       "      <td>Full-time</td>\n",
       "      <td>In-person</td>\n",
       "      <td>United States</td>\n",
       "      <td>M</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2023</td>\n",
       "      <td>Data Scientist</td>\n",
       "      <td>Data Science and Research</td>\n",
       "      <td>USD</td>\n",
       "      <td>93300</td>\n",
       "      <td>93300</td>\n",
       "      <td>United States</td>\n",
       "      <td>Senior</td>\n",
       "      <td>Full-time</td>\n",
       "      <td>In-person</td>\n",
       "      <td>United States</td>\n",
       "      <td>M</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   work_year             job_title                    job_category  \\\n",
       "0       2023  Data DevOps Engineer                Data Engineering   \n",
       "1       2023        Data Architect  Data Architecture and Modeling   \n",
       "2       2023        Data Architect  Data Architecture and Modeling   \n",
       "3       2023        Data Scientist       Data Science and Research   \n",
       "4       2023        Data Scientist       Data Science and Research   \n",
       "\n",
       "  salary_currency  salary  salary_in_usd employee_residence experience_level  \\\n",
       "0             EUR   88000          95012            Germany        Mid-level   \n",
       "1             USD  186000         186000      United States           Senior   \n",
       "2             USD   81800          81800      United States           Senior   \n",
       "3             USD  212000         212000      United States           Senior   \n",
       "4             USD   93300          93300      United States           Senior   \n",
       "\n",
       "  employment_type work_setting company_location company_size  \n",
       "0       Full-time       Hybrid          Germany            L  \n",
       "1       Full-time    In-person    United States            M  \n",
       "2       Full-time    In-person    United States            M  \n",
       "3       Full-time    In-person    United States            M  \n",
       "4       Full-time    In-person    United States            M  "
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "\n",
    "df.head()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "bd2031cd",
   "metadata": {},
   "outputs": [],
   "source": [
    "### ───Step 2) Chart 1: World‐map choropleth of Salary ────────────────────────────\n",
    "\n",
    "# fetch GeoJSON\n",
    "GEOURL    = \"https://raw.githubusercontent.com/johan/world.geo.json/master/countries.geo.json\"\n",
    "world_geo = json.loads(urllib.request.urlopen(GEOURL).read().decode())\n",
    "names      = [feat[\"properties\"][\"name\"] for feat in world_geo[\"features\"]]\n",
    "\n",
    "# build a fuzzy map from your df values to geojson names\n",
    "country_name_map = {}\n",
    "for c in sorted(df[\"employee_residence\"].unique()):\n",
    "    if c in names:\n",
    "        country_name_map[c] = c\n",
    "    else:\n",
    "        match = get_close_matches(c, names, n=1, cutoff=0.6)\n",
    "        country_name_map[c] = match[0] if match else c\n",
    "\n",
    "# create a MapName column\n",
    "df[\"MapName\"] = df[\"employee_residence\"].map(country_name_map).fillna(df[\"employee_residence\"])\n",
    "\n",
    "# init Salary property in geojson\n",
    "for feat in world_geo[\"features\"]:\n",
    "    feat[\"properties\"][\"Salary\"] = 0\n",
    "\n",
    "geo_src = GeoJSONDataSource(geojson=json.dumps(world_geo))\n",
    "\n",
    "# dropdowns\n",
    "sel_country = Select(\n",
    "    title=\"Country:\", value=\"All\",\n",
    "    options=[\"All\"] + sorted(df[\"employee_residence\"].unique())\n",
    ")\n",
    "sel_spec = Select(\n",
    "    title=\"Job Category:\", value=\"All\",\n",
    "    options=[\"All\"] + sorted(df[\"job_category\"].unique())\n",
    ")\n",
    "\n",
    "# callback to fill in mean salaries\n",
    "def update_map(attr, old, new):\n",
    "    d = df.copy()\n",
    "    if sel_country.value != \"All\":\n",
    "        d = d[d[\"employee_residence\"] == sel_country.value]\n",
    "    if sel_spec.value != \"All\":\n",
    "        d = d[d[\"job_category\"] == sel_spec.value]\n",
    "    agg = d.groupby(\"MapName\")[salary_col].mean().to_dict()\n",
    "    for feat in world_geo[\"features\"]:\n",
    "        nm = feat[\"properties\"][\"name\"]\n",
    "        feat[\"properties\"][\"Salary\"] = float(agg.get(nm, 0))\n",
    "    geo_src.geojson = json.dumps(world_geo)\n",
    "\n",
    "sel_country.on_change(\"value\", update_map)\n",
    "sel_spec .on_change(\"value\", update_map)\n",
    "update_map(None, None, None)\n",
    "\n",
    "# color mapper\n",
    "low, high = df[salary_col].min(), df[salary_col].max()\n",
    "mapper     = LinearColorMapper(palette=Viridis256, low=low, high=high)\n",
    "\n",
    "p1 = figure(\n",
    "    title=\"Salary by Country\",\n",
    "    tools=\"pan,wheel_zoom,reset,hover\",\n",
    "    x_axis_location=None, y_axis_location=None,\n",
    "    width=900, height=500\n",
    ")\n",
    "p1.grid.grid_line_color = None\n",
    "p1.patches(\n",
    "    \"xs\", \"ys\", source=geo_src,\n",
    "    fill_color={\"field\":\"Salary\",\"transform\":mapper},\n",
    "    line_color=\"gray\", line_width=0.3, fill_alpha=0.8\n",
    ")\n",
    "p1.hover.tooltips = [\n",
    "    (\"Country\", \"@name\"),\n",
    "    (\"Salary\",  \"@Salary{$0,0}\")\n",
    "]\n",
    "p1.add_layout(\n",
    "    ColorBar(color_mapper=mapper, ticker=BasicTicker(),\n",
    "             label_standoff=12, location=(0,0)),\n",
    "    \"right\"\n",
    ")\n",
    "\n",
    "layout1 = column(\n",
    "    row(sel_country, sel_spec, sizing_mode=\"stretch_width\"),\n",
    "    p1\n",
    ")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "c355994e",
   "metadata": {},
   "outputs": [],
   "source": [
    "### ───Step 3) Chart 2: Salary by Experience Level ────────────────────────────────\n",
    "bar_df = df.groupby(\"experience_level\")[salary_col].mean().reset_index()\n",
    "src2   = ColumnDataSource(bar_df)\n",
    "\n",
    "p2 = figure(\n",
    "    x_range=bar_df[\"experience_level\"].tolist(),\n",
    "    title=\"Salary by Experience Level\",\n",
    "    width=700, height=350,\n",
    "    tools=\"hover,reset\"\n",
    ")\n",
    "p2.vbar(\n",
    "    x=\"experience_level\", top=salary_col,\n",
    "    width=0.6, source=src2, fill_color=\"#2ca02c\"\n",
    ")\n",
    "p2.yaxis.axis_label = \"Salary\"\n",
    "p2.yaxis.formatter  = NumeralTickFormatter(format=\"$0,0\")\n",
    "p2.hover.tooltips = [\n",
    "    (\"Experience\", \"@experience_level\"),\n",
    "    (\"Salary\",     f\"@{salary_col}{{${{0,0}}}}\")\n",
    "]\n",
    "\n",
    "sel2 = Select(\n",
    "    title=\"Country (Exp):\", value=\"All\",\n",
    "    options=[\"All\"] + sorted(df[\"employee_residence\"].unique())\n",
    ")\n",
    "def update_bar(attr, old, new):\n",
    "    d = df if sel2.value==\"All\" else df[df[\"employee_residence\"]==sel2.value]\n",
    "    u = d.groupby(\"experience_level\")[salary_col].mean().reset_index()\n",
    "    src2.data = u.to_dict(orient=\"list\")\n",
    "    p2.x_range.factors = u[\"experience_level\"].tolist()\n",
    "\n",
    "sel2.on_change(\"value\", update_bar)\n",
    "layout2 = column(sel2, p2)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "e9bf858b",
   "metadata": {},
   "outputs": [],
   "source": [
    "### ───Step 4) Chart 3: Salary by Work Setting × Job Category ────────────────────\n",
    "grp = (\n",
    "    df\n",
    "    .groupby([\"work_setting\",\"job_category\"])[salary_col]\n",
    "    .mean()\n",
    "    .reset_index()\n",
    ")\n",
    "grp[\"x\"] = list(zip(grp.work_setting, grp.job_category))\n",
    "src3 = ColumnDataSource(grp)\n",
    "\n",
    "p3 = figure(\n",
    "    x_range=FactorRange(*grp[\"x\"]),\n",
    "    title=\"Salary by Work Setting × Job Category\",\n",
    "    width=1200, height=400,\n",
    "    tools=\"hover,reset\"\n",
    ")\n",
    "p3.vbar(\n",
    "    x=\"x\", top=salary_col,\n",
    "    width=0.6, source=src3, fill_color=\"#1f77b4\"\n",
    ")\n",
    "p3.yaxis.axis_label = \"Salary\"\n",
    "p3.yaxis.formatter  = NumeralTickFormatter(format=\"$0,0\")\n",
    "p3.hover.tooltips = [\n",
    "    (\"Category\",\"@x\"),\n",
    "    (\"Salary\",  f\"@{salary_col}{{${{0,0}}}}\")\n",
    "]\n",
    "p3.xaxis.major_label_orientation   = pi/4\n",
    "p3.xaxis.major_label_text_font_size = \"9pt\"\n",
    "p3.x_range.range_padding           = 0.05\n",
    "\n",
    "sel3 = Select(\n",
    "    title=\"Country (Group):\", value=\"All\",\n",
    "    options=[\"All\"] + sorted(df[\"employee_residence\"].unique())\n",
    ")\n",
    "def update_grp(attr, old, new):\n",
    "    d = df if sel3.value==\"All\" else df[df[\"employee_residence\"]==sel3.value]\n",
    "    u = (\n",
    "        d\n",
    "        .groupby([\"work_setting\",\"job_category\"])[salary_col]\n",
    "        .mean()\n",
    "        .reset_index()\n",
    "    )\n",
    "    u[\"x\"] = list(zip(u.work_setting, u.job_category))\n",
    "    src3.data = u.to_dict(orient=\"list\")\n",
    "    p3.x_range.factors = u[\"x\"].tolist()\n",
    "\n",
    "sel3.on_change(\"value\", update_grp)\n",
    "layout3 = column(sel3, p3)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "0b1e29a0",
   "metadata": {},
   "outputs": [],
   "source": [
    "### ───Step 5) Chart 4: Salary Trend by Year ──────────────────────────────────────\n",
    "tdf  = df.groupby(\"work_year\")[salary_col].mean().reset_index()\n",
    "src4 = ColumnDataSource(tdf)\n",
    "\n",
    "p4 = figure(\n",
    "    title=\"Salary Trend by Year\",\n",
    "    x_axis_label=\"Year\", y_axis_label=\"Salary\",\n",
    "    width=700, height=350,\n",
    "    tools=\"hover,reset\"\n",
    ")\n",
    "p4.line(\n",
    "    x=\"work_year\", y=salary_col,\n",
    "    source=src4, line_width=2, color=\"#d62728\"\n",
    ")\n",
    "p4.yaxis.formatter = NumeralTickFormatter(format=\"$0,0\")\n",
    "p4.hover.tooltips = [\n",
    "    (\"Year\",   \"@work_year\"),\n",
    "    (\"Salary\", f\"@{salary_col}{{${{0,0}}}}\")\n",
    "]\n",
    "\n",
    "sel4 = Select(\n",
    "    title=\"Job Category (Trend):\", value=\"All\",\n",
    "    options=[\"All\"] + sorted(df[\"job_category\"].unique())\n",
    ")\n",
    "def update_trend(attr, old, new):\n",
    "    d = df if sel4.value==\"All\" else df[df[\"job_category\"]==sel4.value]\n",
    "    u = d.groupby(\"work_year\")[salary_col].mean().reset_index()\n",
    "    src4.data = u.to_dict(orient=\"list\")\n",
    "\n",
    "sel4.on_change(\"value\", update_trend)\n",
    "layout4 = column(sel4, p4)\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "297a44e8",
   "metadata": {},
   "outputs": [],
   "source": [
    "#### ───Step 6) Chart 5: Salary by Employment Type (Pie) ──────────────────────────\n",
    "emp = df.groupby(\"employment_type\")[salary_col].mean().reset_index()\n",
    "total = emp[salary_col].sum()\n",
    "emp[\"angle\"]      = emp[salary_col]/total * 2*pi\n",
    "emp[\"percentage\"] = emp[salary_col]/total * 100\n",
    "emp[\"color\"]      = Category20c[len(emp)]\n",
    "src5 = ColumnDataSource(emp)\n",
    "\n",
    "p5 = figure(\n",
    "    title=\"Salary by Employment Type\",\n",
    "    width=700, height=350,\n",
    "    tools=\"reset\"\n",
    ")\n",
    "p5.wedge(\n",
    "    x=0, y=1, radius=0.4,\n",
    "    start_angle=cumsum(\"angle\", include_zero=True),\n",
    "    end_angle=cumsum(\"angle\"),\n",
    "    fill_color=\"color\", line_color=\"white\",\n",
    "    legend_field=\"employment_type\", source=src5\n",
    ")\n",
    "p5.axis.visible      = False\n",
    "p5.grid.grid_line_color = None\n",
    "\n",
    "sel5 = Select(\n",
    "    title=\"Country (Pie):\", value=\"All\",\n",
    "    options=[\"All\"] + sorted(df[\"employee_residence\"].unique())\n",
    ")\n",
    "def update_pie(attr, old, new): \n",
    "    d = df if sel5.value==\"All\" else df[df[\"employee_residence\"]==sel5.value]\n",
    "    e = d.groupby(\"employment_type\")[salary_col].mean().reset_index()\n",
    "    tot2 = e[salary_col].sum()\n",
    "    e[\"angle\"]      = e[salary_col]/tot2 * 2*pi\n",
    "    e[\"percentage\"] = e[salary_col]/tot2 * 100\n",
    "    e[\"color\"]      = Category20c[len(e)]\n",
    "    src5.data        = e.to_dict(orient=\"list\")\n",
    "\n",
    "sel5.on_change(\"value\", update_pie)\n",
    "layout5 = column(sel5, p5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "916032b5",
   "metadata": {},
   "outputs": [],
   "source": [
    "### ───Step 7) Chart 6: Salary Distribution Histogram ────────────────────────────\n",
    "hist, edges = np.histogram(df[salary_col], bins=25)\n",
    "src6 = ColumnDataSource(dict(top=hist, left=edges[:-1], right=edges[1:]))\n",
    "\n",
    "p6 = figure(\n",
    "    title=\"Salary Distribution\",\n",
    "    x_axis_label=\"Salary\", y_axis_label=\"Count\",\n",
    "    width=700, height=350,\n",
    "    tools=\"hover,reset\"\n",
    ")\n",
    "p6.quad(\n",
    "    top=\"top\", bottom=0,\n",
    "    left=\"left\", right=\"right\",\n",
    "    source=src6, line_color=\"white\"\n",
    ")\n",
    "p6.add_tools(HoverTool(\n",
    "    tooltips=[(\"Range\",\"$x{0,0} – $x{0,0}\"),(\"Count\",\"@top\")],\n",
    "    mode=\"vline\"\n",
    "))\n",
    "layout6 = column(p6)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "b2371ebd",
   "metadata": {},
   "outputs": [],
   "source": [
    "### ───Step 8) Add all layouts to the document ────────────────────────────────────\n",
    "for L in (layout1, layout2, layout3, layout4, layout5, layout6):\n",
    "    curdoc().add_root(L)\n",
    "\n",
    "curdoc().title = \"Global Salary Dashboard\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "9937b396",
   "metadata": {},
   "outputs": [],
   "source": [
    "!bokeh serve --show dashboard1.ipynb --port 5010"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
